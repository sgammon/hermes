
## protocol bindings
from protocol import http
from protocol import intake
from protocol import builtin
from protocol import timedelta
from protocol import parameter
from protocol import environment

## protocol extensions
from protocol import decorators
from protocol.attribution import Attribution
from protocol.aggregation import Aggregation
from protocol.parameter.group import ParameterGroup


## Constants
_DEFAULT_COOKIE_NAME = "_amp"

# Default attribution / aggregation lookback window
_DEFAULT_LOOKBACK = (timedelta.TimeWindow.ONE_DAY,
                     timedelta.TimeWindow.ONE_WEEK,
                     timedelta.TimeWindow.TWO_WEEKS,
                     timedelta.TimeWindow.THREE_WEEKS,
                     timedelta.TimeWindow.FOREVER)


## EventProfile
# Default Event Profile.
class EventProfile(object):

    ''' Event Profile describing the basic case for an
        *Profile*. '''

    class Base(ParameterGroup):

        ''' Parameter group for base tracker parameters. '''

        # Sentinel: flag indicating that the hit URL was generated by our systems.
        sentinel = bool, {
            'policy': parameter.ParameterPolicy.ENFORCED,
            'source': http.DataSlot.PARAM,
            'name': builtin.TrackerProtocol.SENTINEL,
            'category': parameter.ParameterType.INTERNAL
        }

        # Type: represents the type of hit, such as "impression" or "click".
        type = str, {
            'policy': parameter.ParameterPolicy.REQUIRED,
            'source': http.DataSlot.PARAM,
            'name': builtin.TrackerProtocol.TYPE,
            'category': parameter.ParameterType.INTERNAL,
            'aggregations': [
                Aggregation(name='events-by-type', interval=_DEFAULT_LOOKBACK)
            ]
        }

        # Tracker: represents the ID of the parent tracker for the current hit.
        tracker = str, {
            'policy': parameter.ParameterPolicy.REQUIRED,
            'source': http.DataSlot.PARAM,
            'name': builtin.TrackerProtocol.TRACKER,
            'category': parameter.ParameterType.AMPUSH,
            'aggregations': [
                Aggregation(name='events-by-tracker', interval=_DEFAULT_LOOKBACK)
            ]
        }

        # Provider: represents the ID string of the provider of this hit.
        provider = str, {
            'policy': parameter.ParameterPolicy.OPTIONAL,
            'source': http.DataSlot.PARAM,
            'name': builtin.TrackerProtocol.PROVIDER,
            'category': parameter.ParameterType.INTERNAL,
            'aggregations': [
                Aggregation(name='events-by-provider', interval=_DEFAULT_LOOKBACK)
            ]
        }

        # Contract: represents the contract scope which this hit should be recorded for.
        contract = str, {
            'policy': parameter.ParameterPolicy.OPTIONAL,
            'source': http.DataSlot.PARAM,
            'name': builtin.TrackerProtocol.CONTRACT,
            'category': parameter.ParameterType.AMPUSH,
            'aggregations': [
                Aggregation(name='events-by-contract', interval=_DEFAULT_LOOKBACK)
            ]
        }

    class Environment(ParameterGroup):

        ''' Parameter group for client browser environment. '''

        # OS: The operating system the browser is running in.
        os = str, {
            'policy': parameter.ParameterPolicy.PREFERRED,
            'source': http.DataSlot.PARAM,
            'name': environment.BrowserEnvironment.OS,
            'category': parameter.ParameterType.DATA,
            'aggregations': [
                Aggregation(name='hits-by-os', interval=_DEFAULT_LOOKBACK)
            ]
        }

        # Arch: The underlying architecture of the host operating system (i.e. "x86-64").
        arch = str, {
            'policy': parameter.ParameterPolicy.OPTIONAL,
            'source': http.DataSlot.PARAM,
            'name': environment.BrowserEnvironment.ARCH,
            'category': parameter.ParameterType.DATA,
        }

        # Vendor: The author of the browser being used (i.e. "Google" for Chrome).
        vendor = str, {
            'policy': parameter.ParameterPolicy.PREFERRED,
            'source': http.DataSlot.PARAM,
            'name': environment.BrowserEnvironment.VENDOR,
            'category': parameter.ParameterType.DATA
        }

        # Browser: The software-name of the browser being used (i.e. "Safari" for Safari).
        browser = str, {
            'policy': parameter.ParameterPolicy.PREFERRED,
            'source': http.DataSlot.PARAM,
            'name': environment.BrowserEnvironment.BROWSER,
            'category': parameter.ParameterType.DATA,
            'aggregations': [
                Aggregation(name='hits-by-browser', interval=_DEFAULT_LOOKBACK)
            ]
        }

    class Consumer(ParameterGroup):

        ''' Parameter group for identifying unique consumers. '''

        # Fingerprint: The consumer profile fingerprint, either encountered or created.
        fingerprint = str, {
            'policy': parameter.ParameterPolicy.SPECIAL,
            'source': http.DataSlot.COOKIE,
            'name': _DEFAULT_COOKIE_NAME,
            'category': parameter.ParameterType.INTERNAL,
            'attributions': [
                Attribution(name='hits-to-cookies')
            ]
        }

    class System(ParameterGroup):

        ''' Parameter group for system state/configuration. '''

        channel = int, {
            'policy': parameter.ParameterPolicy.SPECIAL,
            'source': http.DataSlot.HEADER,
            'name': 'XAF-Channel',
            'category': parameter.ParameterType.INTERNAL,
            'binding': intake.InputChannel
        }
